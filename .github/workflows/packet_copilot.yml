name: 'ðŸ“¦ Packet Analyzer (Gemini CLI + Packet Copilot MCP)'

on:
  workflow_dispatch: {}
  push:
    paths:
      - '**/*.pcap'
      - '**/*.pcapng'

permissions:
  contents: write
  id-token: write

jobs:
  detect-pcaps:
    runs-on: ubuntu-latest
    outputs:
      pcaps: ${{ steps.find.outputs.pcaps }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Find changed PCAP files'
        id: find
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.sha }}
        run: |
          set -euo pipefail

          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            git ls-files '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          else
            git diff --name-only "${BEFORE}" "${AFTER}" -- '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          fi

          # De-dup and ensure files still exist
          sort -u /tmp/pcaps.txt | while read -r f; do
            [ -f "$f" ] && echo "$f"
          done > /tmp/pcaps_final.txt || true

          # Emit a SINGLE-LINE JSON array for matrix
          pcaps_json=$(jq -R -s -c 'split("\n") | map(select(length>0))' /tmp/pcaps_final.txt)
          echo "pcaps=${pcaps_json}" >> "$GITHUB_OUTPUT"

  analyze-pcaps:
    needs: detect-pcaps
    if: ${{ needs.detect-pcaps.outputs.pcaps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      # serialize commits (avoid pushing from parallel jobs)
      max-parallel: 1
      matrix:
        pcap: ${{ fromJSON(needs.detect-pcaps.outputs.pcaps) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Install Node (for npx)'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: 'Set up git user'
        run: |
          git config --global user.name "gemini-cli[bot]"
          git config --global user.email "gemini-cli[bot]@users.noreply.github.com"

      - name: 'Prepare ~/.gemini/settings.json with Packet Copilot MCP'
        env:
          PACKET_COPILOT_URL: 'https://packetcopilot.selector.ai/mcp/'
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.gemini"
          SETTINGS="${HOME}/.gemini/settings.json"
          TMP="${RUNNER_TEMP}/mcp_patch.json"

          # Match your working local config exactly
          jq -n --arg url "${PACKET_COPILOT_URL}" '
          {
            selectedAuthType: "gemini-api-key",
            mcpServers: {
              "Packet Copilot MCP": {
                name: "Packet Copilot MCP",
                httpUrl: $url
              }
            }
          }' > "${TMP}"

          # Merge with existing settings.json if present
          if [ -f "${SETTINGS}" ]; then
            jq -s 'reduce .[] as $item ({}; . * $item)' "${SETTINGS}" "${TMP}" > "${SETTINGS}.new"
            mv "${SETTINGS}.new" "${SETTINGS}"
          else
            cp "${TMP}" "${SETTINGS}"
          fi

          echo "Final settings.json:"
          cat "${SETTINGS}"

      - name: 'Sanity check MCP wiring (pinned 0.1.20)'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Show CLI version and list MCPs
          npx -y @google/gemini-cli@0.1.20 --version
          npx -y @google/gemini-cli@0.1.20 -y -p "/mcp"

      - name: 'Prep report + base64'
        id: prep
        run: |
          set -euo pipefail
          mkdir -p reports
          PCAP="${{ matrix.pcap }}"
          base="$(basename "${PCAP}")"
          stem="${base%.*}"
          report_path="reports/${stem}.md"
          tmp_b64="${RUNNER_TEMP}/${stem}.b64"
          base64 -w 0 "${PCAP}" > "${tmp_b64}"
          echo "pcap_name=${base}" >> "$GITHUB_OUTPUT"
          echo "report_path=${report_path}" >> "$GITHUB_OUTPUT"
          echo "b64_path=${tmp_b64}" >> "$GITHUB_OUTPUT"

      - name: 'Run Gemini (Packet Copilot MCP, pinned CLI 0.1.20)'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          B64_PATH: ${{ steps.prep.outputs.b64_path }}
          REPORT_PATH: ${{ steps.prep.outputs.report_path }}
          PCAP_NAME: ${{ steps.prep.outputs.pcap_name }}
        run: |
          set -euo pipefail

          # Build the prompt safely (no shell expansion inside heredoc)
          cat > /tmp/prompt.txt <<'PROMPT'
You are running in a CI job with access to the MCP server "Packet Copilot MCP".
Available tools: analyze_pcap, cleanup, convert_to_json, describe_pcap, index_pcap, new_session, sanitize_json, upload_pcap_base64.

Shell Safety:
- Do NOT use command substitution or process substitution (no $(), backticks, <(), >()).
- Use plain file redirection only.

Inputs (environment variables):
- B64_PATH: Path to a file containing the base64-encoded PCAP (single line).
- REPORT_PATH: Output markdown path for the final report.
- PCAP_NAME: Original PCAP filename for the report title.

Steps:
1. Start a new analysis session (`new_session`).
2. Read base64 from B64_PATH and upload with `upload_pcap_base64`.
3. Convert to structured JSON (`convert_to_json`), then normalize/validate (`sanitize_json`).
4. Build an index (`index_pcap`).
5. Summarize (`describe_pcap`).
6. Deep analysis (`analyze_pcap`): protocols, flows, timings, anomalies, TLS/DNS/HTTP details, security flags.
7. Write a professional Markdown report to REPORT_PATH (do not print to stdout) with sections:
   - Title: "Packet Analysis Report: ${PCAP_NAME}"
   - Executive Summary
   - Key Findings
   - Conversations & Flows
   - Performance & Timing
   - Application/Protocol Insights
   - Security Observations
   - Recommendations
   - Appendix (tables: top endpoints, counts, errors)
8. Use `cleanup` if needed. Finish.
PROMPT

          # Run pinned CLI non-interactively; allow only the Packet Copilot MCP server
          npx -y @google/gemini-cli@0.1.20 -y \
            --allowed-mcp-server-names "Packet Copilot MCP" \
            -p "$(< /tmp/prompt.txt)"

          # Stage report if created
          if [ -f "${REPORT_PATH}" ]; then
            echo "Report created: ${REPORT_PATH}"
            git add "${REPORT_PATH}"
          else
            echo "WARNING: Expected report not created at ${REPORT_PATH}"
          fi

      - name: 'Commit & push report'
        run: |
          set -euo pipefail
          report_path='${{ steps.prep.outputs.report_path }}'
          if [ -f "${report_path}" ]; then
            git pull --rebase
            git add "${report_path}"
            git commit -m "docs: add Packet Copilot analysis report for ${{ matrix.pcap }}"
            git push
            echo "Committed ${report_path}"
          else
            echo "No report produced for ${{ matrix.pcap }}"
          fi
