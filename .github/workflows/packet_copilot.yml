name: 'ðŸ“¦ Packet Analyzer (Gemini CLI + Packet Copilot MCP)'

on:
  workflow_dispatch: {}
  push:
    paths:
      - '**/*.pcap'
      - '**/*.pcapng'

permissions:
  contents: write
  id-token: write

jobs:
  detect-pcaps:
    runs-on: ubuntu-latest
    outputs:
      pcaps: ${{ steps.find.outputs.pcaps }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Find changed PCAP files'
        id: find
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.sha }}
        run: |
          set -euo pipefail

          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            git ls-files '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          else
            git diff --name-only "${BEFORE}" "${AFTER}" -- '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          fi

          # De-dup and ensure files still exist
          sort -u /tmp/pcaps.txt | while read -r f; do
            [ -f "$f" ] && echo "$f"
          done > /tmp/pcaps_final.txt || true

          # Emit a SINGLE-LINE JSON array for matrix
          pcaps_json=$(jq -R -s -c 'split("\n") | map(select(length>0))' /tmp/pcaps_final.txt)
          echo "pcaps=${pcaps_json}" >> "$GITHUB_OUTPUT"

  analyze-pcaps:
    needs: detect-pcaps
    if: ${{ needs.detect-pcaps.outputs.pcaps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        pcap: ${{ fromJSON(needs.detect-pcaps.outputs.pcaps) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Set up git user'
        run: |
          git config --global user.name "gemini-cli[bot]"
          git config --global user.email "gemini-cli[bot]@users.noreply.github.com"

      - name: 'Prepare ~/.gemini/settings.json with Packet Copilot MCP'
        env:
          PACKET_COPILOT_URL: 'https://packetcopilot.selector.ai/mcp/'
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.gemini"
          SETTINGS="${HOME}/.gemini/settings.json"
          TMP="${RUNNER_TEMP}/mcp_patch.json"

          jq -n --arg url "${PACKET_COPILOT_URL}" \
            '{"mcpServers":{PacketCopilot:{httpUrl:$url,"timeout":10000}}}' > "${TMP}"

          if [ -f "${SETTINGS}" ]; then
            jq -s 'reduce .[] as $item ({}; . * $item)' "${SETTINGS}" "${TMP}" > "${SETTINGS}.new"
            mv "${SETTINGS}.new" "${SETTINGS}"
          else
            cp "${TMP}" "${SETTINGS}"
          fi

          echo "Final settings.json:"
          cat "${SETTINGS}"

      - name: 'Prep report + base64'
        id: prep
        run: |
          set -euo pipefail
          mkdir -p reports
          PCAP="${{ matrix.pcap }}"
          base="$(basename "${PCAP}")"
          stem="${base%.*}"
          # Absolute path so Gemini write_file works
          report_path="${GITHUB_WORKSPACE}/reports/${stem}-$(date +%Y%m%d).md"
          tmp_b64="${stem}.b64"
          base64 -w 0 "${PCAP}" > "${tmp_b64}"
          echo "pcap_name=${base}" >> "$GITHUB_OUTPUT"
          echo "report_path=${report_path}" >> "$GITHUB_OUTPUT"
          echo "b64_path=${tmp_b64}" >> "$GITHUB_OUTPUT"

      - name: 'Step 1: Analyze PCAP with Packet Copilot'
        id: analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          B64_PATH: ${{ steps.prep.outputs.b64_path }}
        run: |
          set -euo pipefail
          PROMPT="Use the Packet Copilot tool to analyze the PCAP data from the file at ${B64_PATH}. Output ONLY the raw, unstructured findings directly. Do not add any conversational text or formatting."
          ANALYSIS_RESULT=$(npx -y @google/gemini-cli@0.1.20 -p "${PROMPT}")
          echo "analysis_result<<EOF" >> "$GITHUB_OUTPUT"
          echo "${ANALYSIS_RESULT}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: 'Step 2: Generate Markdown Report'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ANALYSIS_DATA: ${{ steps.analysis.outputs.analysis_result }}
          REPORT_PATH: ${{ steps.prep.outputs.report_path }}
          PCAP_NAME: ${{ steps.prep.outputs.pcap_name }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |-
            You are a report-writing assistant.
            Your task is to take the raw network analysis data provided below and format it into a professional Markdown report.

            Instructions:
            1. Use the exact report structure specified.
            2. Write the final report directly to the file at '${{ env.REPORT_PATH }}'. Do not print it to standard output.

            Report Structure:
            - Title: "Packet Analysis Report: ${{ env.PCAP_NAME }}"
            - Executive Summary
            - Key Findings
            - Conversations & Flows
            - Performance & Timing Analysis
            - Application & Protocol Insights (TLS, DNS, HTTP)
            - Security Observations
            - Recommendations
            - Appendix

            Begin formatting the report now.

            ---
            Raw Analysis Data:
            ${{ env.ANALYSIS_DATA }}

      - name: 'Commit & push report'
        run: |
          set -euo pipefail
          report_path='${{ steps.prep.outputs.report_path }}'
          if [ -f "${report_path}" ]; then
            git pull --rebase
            git add "${report_path}"
            git commit -m "docs: add Packet Copilot analysis report for ${{ matrix.pcap }}"
            git push
            echo "Committed ${report_path}"
          else
            echo "No report produced for ${{ matrix.pcap }}"
          fi