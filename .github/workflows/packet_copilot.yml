name: 'ðŸ“¦ Packet Analyzer (Gemini CLI + Packet Copilot MCP)'

on:
  workflow_dispatch: {}
  push:
    paths:
      - '**/*.pcap'
      - '**/*.pcapng'

permissions:
  contents: write
  id-token: write

jobs:
  detect-pcaps:
    runs-on: ubuntu-latest
    outputs:
      pcaps: ${{ steps.find.outputs.pcaps }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Find changed PCAP files'
        id: find
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.sha }}
        run: |
          set -euo pipefail
        
          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            git ls-files '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          else
            git diff --name-only "${BEFORE}" "${AFTER}" -- '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          fi
        
          # De-dup and ensure files still exist
          sort -u /tmp/pcaps.txt | while read -r f; do
            [ -f "$f" ] && echo "$f"
          done > /tmp/pcaps_final.txt || true
        
          # Emit a SINGLE-LINE JSON array for matrix
          pcaps_json=$(jq -R -s -c 'split("\n") | map(select(length>0))' /tmp/pcaps_final.txt)
          echo "pcaps=${pcaps_json}" >> "$GITHUB_OUTPUT"

  analyze-pcaps:
    needs: detect-pcaps
    if: ${{ needs.detect-pcaps.outputs.pcaps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      # serialize commits (avoid pushing from parallel jobs)
      max-parallel: 1
      matrix:
        pcap: ${{ fromJSON(needs.detect-pcaps.outputs.pcaps) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Set up git user'
        run: |
          git config --global user.name "gemini-cli[bot]"
          git config --global user.email "gemini-cli[bot]@users.noreply.github.com"

      - name: 'Prepare ~/.gemini/settings.json with Packet Copilot MCP'
        env:
          PACKET_COPILOT_URL: 'https://packetcopilot.selector.ai/mcp/'
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.gemini"
          SETTINGS="${HOME}/.gemini/settings.json"
          TMP="${RUNNER_TEMP}/mcp_patch.json"

          jq -n --arg url "${PACKET_COPILOT_URL}" \
            '{mcpServers:{PacketCopilot:{httpUrl:$url}}}' > "${TMP}"

          if [ -f "${SETTINGS}" ]; then
            jq -s 'reduce .[] as $item ({}; . * $item)' "${SETTINGS}" "${TMP}" > "${SETTINGS}.new"
            mv "${SETTINGS}.new" "${SETTINGS}"
          else
            cp "${TMP}" "${SETTINGS}"
          fi

          echo "Final settings.json:"
          cat "${SETTINGS}"

      - name: 'Prep report + base64'
        id: prep
        run: |
          set -euo pipefail
          mkdir -p reports
          PCAP="${{ matrix.pcap }}"
          base="$(basename "${PCAP}")"
          stem="${base%.*}"
          report_path="reports/${stem}.md"
          tmp_b64="${stem}.b64"
          base64 -w 0 "${PCAP}" > "${tmp_b64}"
          echo "pcap_name=${base}" >> "$GITHUB_OUTPUT"
          echo "report_path=${report_path}" >> "$GITHUB_OUTPUT"
          echo "b64_path=${tmp_b64}" >> "$GITHUB_OUTPUT"

      - name: 'Run Gemini (Packet Copilot MCP)'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          B64_PATH: ${{ steps.prep.outputs.b64_path }}
          REPORT_PATH: ${{ steps.prep.outputs.report_path }}
          PCAP_NAME: ${{ steps.prep.outputs.pcap_name }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          # The inline settings here are fine, but optional,
          # as the CLI will merge them with your ~/.gemini/settings.json file.
          settings: |-
            {
              "maxSessionTurns": 50,
              "telemetry": { "enabled": false, "target": "gcp" }
            }
          prompt: |-
            You are an expert network analyst running in a CI job with access to the Packet Copilot MCP.

            Your task is to analyze the provided packet capture and generate a professional, detailed report.

            Inputs (from environment variables):
            - B64_PATH: Path to a file with the base64-encoded PCAP.
            - REPORT_PATH: The final output path for the Markdown report.
            - PCAP_NAME: The original filename to use in the report title.

            Instructions:
            1. Use the available tools to conduct a thorough analysis of the PCAP data from ${B64_PATH}.
            2. Generate a comprehensive Markdown report covering the topics below.
            3. Write the final report directly to the file at ${REPORT_PATH}. Do not print it to standard output.

            Report Structure:
            - Title: "Packet Analysis Report: ${PCAP_NAME}"
            - Executive Summary
            - Key Findings
            - Conversations & Flows
            - Performance & Timing Analysis
            - Application & Protocol Insights (especially for TLS, DNS, HTTP)
            - Security Observations (anomalies, suspicious flags)
            - Recommendations
            - Appendix (e.g., tables for top talkers, protocol distribution)

            Begin the analysis now.

      - name: 'Commit & push report'
        run: |
          set -euo pipefail
          report_path='${{ steps.prep.outputs.report_path }}'
          if [ -f "${report_path}" ]; then
            git pull --rebase
            git add "${report_path}"
            git commit -m "docs: add Packet Copilot analysis report for ${{ matrix.pcap }}"
            git push
            echo "Committed ${report_path}"
          else
            echo "No report produced for ${{ matrix.pcap }}"
          fi
