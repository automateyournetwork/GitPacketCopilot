name: 'ðŸ“¦ Packet Analyzer (Gemini CLI + Packet Copilot MCP)'

on:
  workflow_dispatch: {}
  push:
    paths:
      - '**/*.pcap'
      - '**/*.pcapng'

permissions:
  contents: write
  id-token: write

jobs:
  detect-pcaps:
    runs-on: ubuntu-latest
    outputs:
      pcaps: ${{ steps.find.outputs.pcaps }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Find changed PCAP files'
        id: find
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.sha }}
        run: |
          set -euo pipefail

          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            git ls-files '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          else
            git diff --name-only "${BEFORE}" "${AFTER}" -- '*.pcap' '*.pcapng' > /tmp/pcaps.txt || true
          fi

          # De-dup and ensure files still exist
          sort -u /tmp/pcaps.txt | while read -r f; do
            [ -f "$f" ] && echo "$f"
          done > /tmp/pcaps_final.txt || true

          # Emit JSON array for matrix
          if [ -s /tmp/pcaps_final.txt ]; then
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/pcaps_final.txt > /tmp/pcaps.json
          else
            printf '[]' > /tmp/pcaps.json
          fi

          echo "pcaps=$(cat /tmp/pcaps.json)" >> "$GITHUB_OUTPUT"

  analyze-pcaps:
    needs: detect-pcaps
    if: ${{ needs.detect-pcaps.outputs.pcaps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      # serialize commits (avoid pushing from parallel jobs)
      max-parallel: 1
      matrix:
        pcap: ${{ fromJSON(needs.detect-pcaps.outputs.pcaps) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Set up git user'
        run: |
          git config --global user.name "gemini-cli[bot]"
          git config --global user.email "gemini-cli[bot]@users.noreply.github.com"

      - name: 'Prepare ~/.gemini/settings.json with Packet Copilot MCP'
        env:
          PACKET_COPILOT_URL: 'https://packetcopilot.selector.ai/mcp/'
        run: |
          set -euo pipefail
          mkdir -p "${HOME}/.gemini"
          SETTINGS="${HOME}/.gemini/settings.json"
          TMP="${RUNNER_TEMP}/mcp_patch.json"

          jq -n --arg url "${PACKET_COPILOT_URL}" \
            '{mcpServers:{PacketCopilot:{httpUrl:$url}}}' > "${TMP}"

          if [ -f "${SETTINGS}" ]; then
            jq -s 'reduce .[] as $item ({}; . * $item)' "${SETTINGS}" "${TMP}" > "${SETTINGS}.new"
            mv "${SETTINGS}.new" "${SETTINGS}"
          else
            cp "${TMP}" "${SETTINGS}"
          fi

          echo "Final settings.json:"
          cat "${SETTINGS}"

      - name: 'Prep report + base64'
        id: prep
        run: |
          set -euo pipefail
          mkdir -p reports
          PCAP="${{ matrix.pcap }}"
          base="$(basename "${PCAP}")"
          stem="${base%.*}"
          report_path="reports/${stem}.md"
          tmp_b64="${RUNNER_TEMP}/${stem}.b64"
          base64 -w 0 "${PCAP}" > "${tmp_b64}"
          echo "pcap_name=${base}" >> "$GITHUB_OUTPUT"
          echo "report_path=${report_path}" >> "$GITHUB_OUTPUT"
          echo "b64_path=${tmp_b64}" >> "$GITHUB_OUTPUT"

      - name: 'Run Gemini (PacketCopilot MCP)'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          # passed through to the agent in the prompt instructions
          B64_PATH: ${{ steps.prep.outputs.b64_path }}
          REPORT_PATH: ${{ steps.prep.outputs.report_path }}
          PCAP_NAME: ${{ steps.prep.outputs.pcap_name }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          # Optional: disable telemetry, set long session if you like
          settings: |-
            {
              "maxSessionTurns": 50,
              "telemetry": { "enabled": false, "target": "gcp" }
            }
          # Non-interactive prompt (no heredocs in bash needed)
          prompt: |-
            You are running in a CI job with access to Packet Copilot MCP (server name: "PacketCopilot").
            Available tools: analyze_pcap, cleanup, convert_to_json, describe_pcap, index_pcap, new_session, sanitize_json, upload_pcap_base64.

            Strict shell safety (important):
            - Do NOT use command substitution or process substitution: no $(), no backticks, no <(), no >().
            - Use plain redirection and explicit files only.

            Inputs (environment variables):
            - B64_PATH: path to a file containing the base64-encoded PCAP (single line).
            - REPORT_PATH: output markdown path where you must write the final report.
            - PCAP_NAME: original PCAP filename to use in the report title.

            Task:
            1) Start a new analysis session with `new_session`.
            2) Read base64 from ${B64_PATH} and upload it with `upload_pcap_base64`.
            3) Convert to structured JSON via `convert_to_json`, then normalize/validate via `sanitize_json`.
            4) Build an index with `index_pcap`.
            5) Summarize with `describe_pcap`.
            6) Deep analysis with `analyze_pcap` (protocols, flows, timings, anomalies, TLS/DNS/HTTP details, security flags).
            7) Write a professional Markdown report to ${REPORT_PATH} (do not print it to stdout) with sections:
               - Title: "Packet Analysis Report: ${PCAP_NAME}"
               - Executive Summary
               - Key Findings
               - Conversations & Flows
               - Performance & Timing
               - Application/Protocol Insights
               - Security Observations
               - Recommendations
               - Appendix (tables: top endpoints, counts, errors)
            8) Use `cleanup` if thereâ€™s transient state to clear. Finish.

      - name: 'Commit & push report'
        run: |
          set -euo pipefail
          report_path='${{ steps.prep.outputs.report_path }}'
          if [ -f "${report_path}" ]; then
            git pull --rebase
            git add "${report_path}"
            git commit -m "docs: add Packet Copilot analysis report for ${{ matrix.pcap }}"
            git push
            echo "Committed ${report_path}"
          else
            echo "No report produced for ${{ matrix.pcap }}"
          fi
